#!/usr/bin/env ruby

if File.directory?("#{File.dirname(__FILE__)}/../lib")
  $:.unshift "#{File.dirname(__FILE__)}/../lib"
end

require "rubygems"
require "mydiff"
require "optparse"


$DEBUG = true

config = {
  :host => "localhost",
  :user => "root",
  :password => nil,
  :gui => "web",
  :ui_port => "8888"
}

opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [options] -o OLDDB -n NEWDB "

  opts.on("-d", "--debug", "Show debug messages") do |v|
    $DEBUG = v
  end
  
  opts.on("-o", "--olddb OLDDB", "Database to apply changes") do |o|
    config[:olddb] = o
  end

  opts.on("-n", "--newdb NEWDB", "Database to read changes") do |n|
    config[:newdb] = n
  end
  
  opts.on("-h", "--host name", "MySQL host to connect (default #{config[:host]})") do |o|
    config[:host] = o
  end
  
  opts.on("-u", "--user name", "MySQL username (default #{config[:user]})") do |o|
    config[:user] = o
  end
  
  opts.on("-p", "--password passwd", "MySQL password") do |o|
    config[:password] = o
  end
  
  opts.on("-g", "--gui", "User interface: cli or web (default)") do |o|
    config[:gui] = o
  end
  
  opts.on("-w", "--web-port port", "Web interface port (default: 4567)") do |o|
    config[:ui_port] = o
  end
  
end

opts.parse!

unless config[:newdb] and config[:olddb]
  puts opts.help
  exit 1
end

md = MyDiff.new(config)
md.ui.start

# popt = config[:password].nil? ? "" : "-p#{config[:password]}"
# system "mysql -h #{config[:host]} -u #{config[:user]} #{popt} #{md.newdb} < new.sql"
# system "mysql -h #{config[:host]} -u #{config[:user]} #{popt} #{md.olddb} < old.sql"
